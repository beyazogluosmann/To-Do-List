// G√∂rev formunu g√∂nderme
document.getElementById('task-form').addEventListener('submit', async (e) => {
    e.preventDefault();

    const taskInput = document.getElementById('task-input').value;
    const priorityInput = document.getElementById('priority-input').value;
    const tagInput = document.getElementById('tag-input').value;

    // Kullanƒ±cƒ±nƒ±n girdiƒüi etiketleri virg√ºlle ayƒ±r ve diziye √ßevir
    const tags = tagInput.split(',').map(tag => tag.trim());

    const response = await fetch('http://localhost:3000/tasks', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            title: taskInput,
            priority: priorityInput,
            tags: tags, // Backend'e etiketleri g√∂nderiyoruz
            completed: false
        }),
    });

    if (response.ok) {
        const task = await response.json();
        addTaskToUI(task);
        document.getElementById('task-input').value = '';
        document.getElementById('tag-input').value = '';
    } else {
        console.error('G√∂rev eklenemedi:', response.statusText);
    }
});


// G√∂rev √∂nceliƒüini UI'da g√ºncelleme
function updateTaskPriorityUI(li, priority) {
    li.classList.remove('priority-y√ºksek', 'priority-orta', 'priority-d√º≈ü√ºk');
    if (priority === 'y√ºksek') li.classList.add('priority-y√ºksek');
    else if (priority === 'orta') li.classList.add('priority-orta');
    else if (priority === 'd√º≈ü√ºk') li.classList.add('priority-d√º≈ü√ºk');
}

// G√∂rev tamamlanma s√ºresini g√∂sterme
function displayCompletionTime(li, createdAt, completedAt) {
    if (!completedAt) return;

    const completedDate = new Date(completedAt);
    const createdDate = new Date(createdAt);
    const timeTaken = completedDate - createdDate;

    const hours = Math.floor(timeTaken / (1000 * 60 * 60));
    const minutes = Math.floor((timeTaken % (1000 * 60 * 60)) / (1000 * 60));

    const completionInfo = li.querySelector('.completion-time');
    if (completionInfo) completionInfo.remove();

    li.querySelector('.task-content').innerHTML += `<br><small class="completion-time">Tamamlanma S√ºresi: ${hours} saat, ${minutes} dakika</small>`;
}

// G√∂revleri UI'ya ekleme
function addTaskToUI(task) {
    const taskList = document.getElementById('task-list');

    // Eƒüer g√∂rev zaten varsa, √∂nce kaldƒ±r
    const existingTask = taskList.querySelector(`li[data-id="${task._id}"]`);
    if (existingTask) existingTask.remove();

    const li = document.createElement('li');
    li.setAttribute('data-id', task._id);
    li.setAttribute('data-priority', task.priority);

    // üè∑ Etiketleri ayrƒ± kutular i√ßinde g√∂stermek i√ßin g√ºncellendi
    const tags = task.tags && task.tags.length > 0 
        ? task.tags.map(tag => `<span class="tag">${tag}</span>`).join(' ') 
        : '<span class="no-tags">Etiket yok</span>';

    const createdAt = task.createdAt ? new Date(task.createdAt).toLocaleString() : 'Bilinmeyen tarih';

    li.innerHTML = `
        <div class="task-content">
            <input type="checkbox" class="task-completed" ${task.completed ? 'checked' : ''}/> 
            <strong>${task.title}</strong> - √ñncelik: <span class="priority-${task.priority}">${task.priority}</span>
            <br><small>Olu≈üturulma Tarihi: ${createdAt}</small>
            <br><div class="tag-container">${tags}</div>
        </div>
        <button class="delete-btn">Sil</button>
        <button class="update-btn">G√ºncelle</button>
        <div class="edit-form" style="display:none;">
            <input type="text" class="edit-title" value="${task.title}" />
            <select class="edit-priority">
                <option value="d√º≈ü√ºk" ${task.priority === 'd√º≈ü√ºk' ? 'selected' : ''}>D√º≈ü√ºk</option>
                <option value="orta" ${task.priority === 'orta' ? 'selected' : ''}>Orta</option>
                <option value="y√ºksek" ${task.priority === 'y√ºksek' ? 'selected' : ''}>Y√ºksek</option>
            </select>
            <input type="text" class="edit-tags" value="${task.tags ? task.tags.join(', ') : ''}" placeholder="Etiketleri gir (virg√ºlle ayƒ±r)">
            <button class="save-btn">Kaydet</button>
        </div>
    `;

    updateTaskStyles(li, task); // Stil g√ºncelleme
    taskList.appendChild(li);
    setupTaskEventListeners(li, task);
}



// G√∂revlerin g√∂r√ºn√ºm√ºn√º g√ºncelleme
function updateTaskStyles(li, task) {
    if (task.completed) {
        li.classList.add('completed-task');
        li.style.color = 'gray'; // Tamamlanmƒ±≈ü g√∂rev i√ßin gri renk
        displayCompletionTime(li, task.createdAt, task.completedAt);
    } else {
        li.classList.remove('completed-task');
        li.style.color = ''; // Tamamlanmamƒ±≈ü g√∂rev i√ßin varsayƒ±lan renk
        const completionTimeInfo = li.querySelector('.completion-time');
        if (completionTimeInfo) completionTimeInfo.remove(); // Tamamlanma s√ºresi bilgisini kaldƒ±r
    }
    updateTaskPriorityUI(li, task.priority); // √ñncelik rengini de g√ºncelle
}

// G√∂rev olay dinleyicilerini ayarlama
function setupTaskEventListeners(li, task) {
    li.querySelector('.delete-btn').addEventListener('click', async () => {
        const response = await fetch(`http://localhost:3000/tasks/${task._id}`, { method: 'DELETE' });
        if (response.ok) li.remove();
        else console.error('G√∂rev silinemedi:', response.statusText);
    });

    li.querySelector('.update-btn').addEventListener('click', () => {
        const editForm = li.querySelector('.edit-form');
        editForm.style.display = editForm.style.display === 'none' ? 'block' : 'none'; // Kullanƒ±cƒ±nƒ±n tƒ±klayƒ±p tƒ±klamamasƒ±na g√∂re!
    });

    li.querySelector('.save-btn').addEventListener('click', async () => {
        const updatedTitle = li.querySelector('.edit-title').value;
        const updatedPriority = li.querySelector('.edit-priority').value;
    
        const updatedData = {
            title: updatedTitle,
            priority: updatedPriority,
            createdAt: new Date().toISOString() // Yeni olu≈üturulma tarihi
        };
    
        // G√∂nderilen veriyi logla
        console.log('G√∂nderilen veri:', updatedData);
    
        try {
            const response = await fetch(`http://localhost:3000/tasks/${task._id}`, {
                method: 'PATCH',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(updatedData),
            });
    
            if (response.ok) {
                const updatedTask = await response.json();
    
                // Backend'den gelen yanƒ±tƒ± logla
                console.log('Backend yanƒ±tƒ±:', updatedTask);
    
                addTaskToUI(updatedTask); // G√ºncellenmi≈ü g√∂revi yeniden ekle
            } else {
                console.error('G√ºncelleme i≈ülemi ba≈üarƒ±sƒ±z:', response.statusText);
            }
        } catch (error) {
            console.error('Hata:', error.message);
        }
    });
    
    

    li.querySelector('.task-completed').addEventListener('change', async (e) => {
        const isCompleted = e.target.checked;
        const completedAt = isCompleted ? new Date().toISOString() : null;

        try {
            const response = await fetch(`http://localhost:3000/tasks/${task._id}`, {
                method: 'PATCH',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ completed: isCompleted, completedAt }),
            });

            if (response.ok) {
                const updatedTask = await response.json();
                updateTaskStyles(li, updatedTask); // Hemen g√∂r√ºn√ºm√º g√ºncelle
            } else {
                console.error('Tamamlama durumu g√ºncellenemedi:', response.statusText);
                e.target.checked = !isCompleted; // Hata durumunda kutucuk durumunu geri al
            }
        } catch (error) {
            console.error('Hata:', error.message);
            e.target.checked = !isCompleted; // Hata durumunda kutucuk durumunu geri al
        }
    });
}

// Filtreleme i≈ülemi
document.getElementById('search-input').addEventListener('input', filterTasks);
document.getElementById('filter-priority').addEventListener('change', filterTasks);

function filterTasks() { 
    const searchInput = document.getElementById('search-input').value.toLowerCase();
    const selectedPriority = document.getElementById('filter-priority').value;
    // bu iki deƒüi≈üken √∂ncelikle kullanƒ±cƒ±nƒ±n girdisini alƒ±r
    const tasks = document.querySelectorAll('li');

    tasks.forEach(task => { // bundan sonra alƒ±nan li √∂geleri ile e≈üle≈ütirme yapƒ±lƒ±r.
        const titleElement = task.querySelector('.task-content');
        const taskTitle = titleElement ? titleElement.textContent.toLowerCase() : '';
        const taskPriority = task.getAttribute('data-priority');

        const matchesSearch = !searchInput || taskTitle.includes(searchInput);
       // let matchesSearch;
        //if (!searchInput) {
       // matchesSearch = true; // Arama kutusu bo≈üsa, e≈üle≈üme saƒülanƒ±r
       //} //else {
      // matchesSearch = taskTitle.includes(searchInput); // Arama metni ba≈ülƒ±kta ge√ßiyorsa, e≈üle≈üme saƒülanƒ±r
         //}

        const matchesPriority = selectedPriority === 'all' || taskPriority === selectedPriority;

        if (matchesSearch && matchesPriority) {
            task.style.display = 'flex';
        } else {
            task.style.display = 'none';
        }
    });
}

// G√∂revleri backend'den √ßekme
async function fetchTasks() {
    const response = await fetch('http://localhost:3000/tasks');
    if (response.ok) {
        const tasks = await response.json();
        tasks.forEach(addTaskToUI);
    } else {
        console.error('G√∂revler y√ºklenemedi:', response.statusText);
    }
}

// G√∂revleri ba≈ülat
fetchTasks();
